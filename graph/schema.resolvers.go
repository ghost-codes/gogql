package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.27

import (
	"context"
	"math/rand"

	db "github.com/ghost-codes/gogql/db/sqlc"
	"github.com/ghost-codes/gogql/graph/model"
)

// CreateVideo is the resolver for the createVideo field.
func (r *mutationResolver) CreateVideo(ctx context.Context, input *model.NewVideo) (*db.Video, error) {
	authorId := 1
	video := db.Video{
		ID:     int32(rand.Int()),
		Title:  &input.Title,
		Url:    &input.URL,
		Author: &authorId,
	}
	name := "Hope"
	r.Store.Queries.CreateUser(ctx, &name)
	return &video, nil
}

// Videos is the resolver for the videos field.
func (r *queryResolver) Videos(ctx context.Context) ([]*db.Video, error) {
	return nil, nil
}

// Auther is the resolver for the auther field.
func (r *videoResolver) Author(ctx context.Context, obj *db.Video) (*db.User, error) {
	user, err := r.Store.GetAuthorByID(ctx, int32(*obj.Author))
	return &user, err
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Video returns VideoResolver implementation.
func (r *Resolver) Video() VideoResolver { return &videoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type videoResolver struct{ *Resolver }
